{
    "db_path": "onda_aircraft.db",
    "default_site": "GMMX",
    "default_date": "2025-04-04",
    "default_day_start": "00:00",
    "default_day_end": "23:59",
    "default_step_time": 10,
    "default_open_min": 180,
    "default_close_min": 60,
    "default_seed": 10,
    "baggage": {
        "max_per_passenger": 3,
        "average_weight": 25,
        "average_length": 0.8
    },
    "conveyor": {
        "average_processing_rate": 2,
        "max_weight": 1700,
        "max_length": 64
    },
    "distributions": {
        "normal": {
            "default_sigma": 20
        },
        "poisson": {
            "default_lambda": 0.03
        },
        "binomialnegatif": {
            "default_mu": 8,
            "default_k": 4
        },
        "beta": {
            "default_alpha": 1,
            "default_beta": 3
        },
        "bimodal": {
            "early_mean": 90,
            "early_std": 20,
            "late_mean": 45,
            "late_std": 15,
            "early_weight": 0.7
        },
        "lognormal": {
            "default_mu": 4.0,
            "default_sigma": 0.5
        },
        "gamma": {
            "default_shape": 2.0,
            "default_scale": 30.0
        },
        "weibull": {
            "default_shape": 1.5,
            "default_scale": 60.0
        },
        "trimodal": {
            "means": [150, 120, 90],
            "stds": [20, 15, 10],
            "weights": [0.5, 0.3, 0.2]
        },
        "pareto": {
            "default_alpha": 2.0,
            "default_scale": 30.0
        }

    },
    "informations": {
        "globaux": "\n            <h3>Simulation de Flux Aéroportuaire</h3>\n            <br>\n            <b>Description :</b><br>\n            Cette application permet de simuler le flux des passagers et des bagages dans un aéroport en fonction des vols programmés.<br><br>\n           \n            <b>Fonctionnalités principales :</b><br>\n            - Simulation avec différentes distributions (uniforme, normale, exponentielle, beta, bimodale, log-normale, gamma, weibull, tri-modale, pareto)<br>\n            - Visualisation des résultats sous forme de graphiques<br>\n            - Export des données au format CSV<br>\n            - Paramétrage fin des simulations<br><br>\n           \n            <b>Utilisation :</b><br>\n            1. Sélectionnez un site, une date et éventuellement une compagnie/vol<br>\n            2. Configurez les paramètres globaux (plage horaire, bagages, convoyeur)<br>\n            3. Lancez les simulations via les onglets ou le bouton \"Lancer toutes les simulations\"<br>\n            4. Visualisez les résultats et exportez-les si nécessaire<br><br>\n           \n            <b>Paramètres clés :</b><br>\n            - <i>Plage horaire</i> : Définit la période de simulation<br>\n            - <i>Ouverture/Fermeture</i> : Contrôle quand l'enregistrement commence/termine avant le vol<br>\n            - <i>Capacité du tapis</i> : Définit les limites du système de convoyage<br><br>\n           \n            <b>Crédits :</b><br>\n            Développé par [Chama EL KHEMSANI/ENAC]<br>\n            Version 1.0 - 2025\n            ",
        "uniform": "\n            <h3>Distribution Uniforme (Approche Simpliste)</h3>\n            <br>\n            <b>Hypothèse :</b><br>\n            Les passagers arrivent de manière équiprobable dans la plage horaire autorisée (entre 3h et 60 min avant le vol).<br><br>\n           \n            <b>Modèle :</b><br>\n            Pour chaque vol, les passagers sont distribués uniformément sur la plage de 1h30 (90 minutes).<br><br>\n           \n            <b>Définition mathématique :</b><br>\n            Distribution où tous les temps d'arrivée sont équiprobables dans la plage définie.<br>\n            <i>arrival_time = random.uniform(open_time, close_time)</i><br><br>\n           \n            <b>Intérêt :</b><br>\n            - Modèle le plus simple et intuitif<br>\n            - Nécessite peu de paramètres<br>\n            - Utile pour une première approximation ou benchmark<br><br>\n           \n            <b>Limites :</b><br>\n            - Peu réaliste car ne reflète pas les comportements humains typiques<br>\n            - Ne capture pas les pics d'arrivée observés dans les aéroports<br>\n            - Tendance à sous-estimer les congestions aux heures de pointe<br>\n           ",
        "normal":  "\n            <h3>Distribution Normale (Gaussienne)</h3>\n            <br>\n            <b>Hypothèse :</b><br>\n            Les passagers tendent à arriver autour d'un temps moyen (par exemple 2h15 avant le vol), avec une dispersion symétrique.<br><br>\n           \n            <b>Modèle :</b><br>\n            La distribution est centrée autour de 75 minutes avant le vol (milieu de la plage).<br>\n            L'écart-type (σ) contrôle l'étalement (par exemple σ = 20 minutes).<br><br>\n           \n            <b>Définition mathématique :</b><br>\n            Distribution gaussienne centrée autour d'un temps moyen avec un écart-type σ.<br>\n            <i>arrival_time = np.random.normal(loc=mean_time, scale=sigma_minutes)</i><br><br>\n           \n            <b>Comportement généré :</b><br>\n            - Les passagers arrivent autour de 1h15 avant le vol (milieu de la plage)<br>\n            - L'écart-type (sigma_minutes) contrôle la dispersion :<br>\n              &nbsp;&nbsp;• σ faible = arrivées groupées autour du milieu<br>\n              &nbsp;&nbsp;• σ élevé = arrivées plus étalées<br><br>\n           \n            <b>Paramètres ajustables :</b><br>\n            - sigma_minutes : Contrôle l'étalement des arrivées (20-30 min donne un profil réaliste)<br><br>\n           \n            <b>Intérêt :</b><br>\n            - Modèle les arrivées groupées autour d'une heure moyenne<br>\n            - Représente bien les comportements standards<br>\n            - Facile à paramétrer avec seulement μ et σ<br><br>\n           \n            <b>Limites :</b><br>\n            - Symétrique (peut ne pas correspondre à la réalité asymétrique)<br>\n            - Peut générer des valeurs hors plage (nécessite troncature)<br>\n            - Ne capture pas les comportements bimodaux (early-birds + last-minute)<br>\n           ",
        "poisson": "\n            <h3>Distribution Exponentielle</h3>\n            <br>\n            <b>Hypothèse :</b><br>\n            Les passagers arrivent de manière aléatoire mais avec un taux d'arrivée décroissant à mesure que l'heure du vol approche (peu de passagers arrivent à la dernière minute).<br><br>\n           \n            <b>Modèle :</b><br>\n            Le temps d'arrivée suit une loi exponentielle de paramètre λ.<br><br>\n           \n            <b>Définition mathématique :</b><br>\n            Temps entre arrivées suivant une loi exponentielle de paramètre λ.<br>\n            <i>arrival_offset = np.random.exponential(scale=1/lambda_param)</i><br>\n            <i>arrival_time = open_time + min(arrival_offset, window_duration)</i><br><br>\n           \n            <b>Comportement généré :</b><br>\n            - Beaucoup d'arrivées juste après l'ouverture (2h avant)<br>\n            - Décroissance exponentielle vers la fermeture (30min avant)<br>\n            - Simule bien les passagers \"prévoyants\" qui arrivent tôt<br><br>\n           \n            <b>Paramètres clés :</b><br>\n            - lambda_param=0.03 : Valeur par défaut (essayez 0.02 à 0.05)<br><br>\n           \n            <b>Intérêt :</b><br>\n            - Modèle bien les arrivées plus fréquentes au début de la plage<br>\n            - Représente bien les passagers \"prévoyants\"<br>\n            - Utile pour les flux à décroissance exponentielle<br><br>\n           \n            <b>Limites :</b><br>\n            - Ne modélise pas les arrivées de dernière minute<br>\n            - Peut être trop concentré en début de période<br>\n            - Sous-estime souvent les pics de fin de période<br>\n           ",
        "beta": "\n            <h3>Distribution Beta</h3>\n            <br>\n            <b>Caractéristiques :</b><br>\n            - α (alpha) contrôle la concentration en début de plage<br>\n            - β (beta) contrôle la concentration en fin de plage<br><br>\n           \n            <b>Exemples de profils :</b><br>\n            - α=2, β=2 : Pic centré (comme une Gaussienne)<br>\n            - α=1, β=3 : Early-birds (pic au début)<br>\n            - α=3, β=1 : Last-minute (pic à la fin)<br><br>\n           \n            <b>Définition mathématique :</b><br>\n            Distribution définie sur [0,1] avec paramètres de forme α et β.<br>\n            <i>beta_samples = np.random.beta(alpha, beta, size=max_pax)</i><br>\n            <i>arrival_times = open_time + beta_samples * window_duration</i><br><br>\n           \n            <b>Avantages :</b><br>\n            - Modélisation flexible des comportements<br>\n            - Bornée naturellement entre 0 et 1 (pas besoin de troncature)<br>\n            - Peut modéliser différents comportements (early-birds, last-minute)<br><br>\n           \n            <b>Paramètres recommandés :</b><br>\n            - Pour un aéroport d'affaires : α=1.5, β=2 (plus d'early-birds)<br>\n            - Pour un aéroport de vacances : α=2, β=1.5 (plus étalé)<br>\n            - Pour des retardataires : α=3, β=1<br><br>\n           \n            <b>Intérêt :</b><br>\n            - Grande flexibilité de forme selon α et β<br>\n            - Bornée naturellement (pas de valeurs hors plage)<br>\n            - Peut s'adapter à différents types de passagers<br><br>\n           \n            <b>Limites :</b><br>\n            - Plus complexe à paramétrer que les distributions simples<br>\n            - Nécessite de comprendre l'impact de α et β sur la forme<br>\n            - Moins intuitive que la normale pour les non-statisticiens<br>\n\n           ",
        "bimodal": "\n            <h3>Modèle Bimodal</h3>\n            <br>\n            <b>Concept :</b><br>\n            Combine deux populations distinctes :<br>\n            - Early-birds (60-80% des passagers) : Arrivent autour de 1h-1h30 avant<br>\n            - Last-minute (20-40%) : Arrivent autour de 30-45min avant<br><br>\n           \n            <b>Définition mathématique :</b><br>\n            Mélange de deux distributions normales :<br>\n            <i>early_arrivals = np.random.normal(loc=departure_min - early_mean, scale=early_std)</i><br>\n            <i>late_arrivals = np.random.normal(loc=departure_min - late_mean, scale=late_std)</i><br>\n            <i>all_arrivals = np.concatenate([early_arrivals, late_arrivals])</i><br><br>\n           \n            <b>Paramètres clés :</b><br>\n            - early_mean/late_mean : Position des pics (en minutes avant le vol)<br>\n            - early_std/late_std : Dispersion des arrivées<br>\n            - early_weight : Proportion de passagers early (0.6 = 60%)<br><br>\n           \n            <b>Valeurs par défaut :</b><br>\n            - early_mean=90, early_std=20<br>\n            - late_mean=45, late_std=15<br>\n            - early_weight=0.7 (70% early, 30% late)<br><br>\n           \n            <b>Avantages :</b><br>\n            - Capture mieux la réalité que les modèles unimodaux<br>\n            - Permet d'ajuster finement les deux pics observés dans les aéroports<br>\n            - Très réaliste pour les flux aéroportuaires<br><br>\n           \n            <b>Limites :</b><br>\n            - Plus complexe avec 5 paramètres à régler<br>\n            - Nécessite une bonne compréhension des sous-populations<br>\n            - Calcul légèrement plus intensif que les distributions simples<br>\n           ",
        "lognormal": "\n            <h3>Distribution Log-normale</h3>\n            <br>\n            <b>Description :</b><br>\n            Utile pour modéliser des phénomènes où les valeurs sont positives et asymétriques, comme les temps d'arrivée des passagers (beaucoup arrivent tôt, quelques-uns arrivent très tôt ou tard).<br><br>\n           \n            <b>Paramètres :</b><br>\n            - μ : moyenne du logarithme des temps (contrôle la position)<br>\n            - σ : écart-type du logarithme des temps (contrôle l'étalement)<br><br>\n           \n            <b>Définition mathématique :</b><br>\n            <i>log_samples = np.random.lognormal(mean=mu, sigma=sigma, size=max_pax)</i><br>\n            <i>arrival_times = open_time + normalized(log_samples) * window_duration</i><br><br>\n           \n            <b>Comportement généré :</b><br>\n            - Distribution asymétrique avec une longue queue à droite<br>\n            - Beaucoup d'arrivées groupées au début de la période<br>\n            - Quelques arrivées très précoces ou très tardives<br><br>\n           \n            <b>Valeurs par défaut :</b><br>\n            - μ=4.0, σ=0.5<br><br>\n           \n            <b>Intérêt :</b><br>\n            - Modèle réaliste pour les comportements asymétriques<br>\n            - Capture bien les extrêmes (passagers très précoces)<br>\n            - Utile pour les flux avec variations importantes<br><br>\n           \n            <b>Limites :</b><br>\n            - Plus complexe à interpréter que la normale<br>\n            - Nécessite une normalisation pour adapter à la plage horaire<br>\n\n           ",
        "gamma": "\n            <h3>Distribution Gamma</h3>\n            <br>\n            <b>Description :</b><br>\n            Idéale pour modéliser des temps d'attente ou des arrivées avec une queue longue (peu de passagers arrivent très tard).<br><br>\n           \n            <b>Paramètres :</b><br>\n            - k (shape) : contrôle la forme de la distribution<br>\n            - θ (scale) : contrôle l'échelle<br><br>\n           \n            <b>Définition mathématique :</b><br>\n            <i>gamma_samples = np.random.gamma(shape=k, scale=θ, size=max_pax)</i><br>\n            <i>arrival_times = open_time + normalized(gamma_samples) * window_duration</i><br><br>\n           \n            <b>Comportement généré :</b><br>\n            - Pour k < 1 : Beaucoup d'arrivées précoces avec une longue queue<br>\n            - Pour k > 1 : Pic décalé avec une queue plus courte<br>\n            - Pour k = 1 : Équivalent à une distribution exponentielle<br><br>\n           \n            <b>Valeurs par défaut :</b><br>\n            - k=2.0, θ=30.0<br><br>\n           \n            <b>Intérêt :</b><br>\n            - Flexibilité pour modéliser différents comportements<br>\n            - Capture bien les queues de distribution longues<br>\n            - Généralisation de la distribution exponentielle<br><br>\n           \n            <b>Limites :</b><br>\n            - Nécessite une normalisation pour adapter à la plage horaire<br>\n            - Paramètres moins intuitifs que la normale<br>\n\n           ",
        "weibull": "\n            <h3>Distribution de Weibull</h3>\n            <br>\n            <b>Description :</b><br>\n            Flexible pour modéliser des comportements variés (early-birds ou last-minute) selon le paramètre de forme.<br><br>\n           \n            <b>Paramètres :</b><br>\n            - k (shape) : détermine si les arrivées sont précoces (k < 1) ou tardives (k > 1)<br>\n            - λ (scale) : étire la distribution<br><br>\n           \n            <b>Définition mathématique :</b><br>\n            <i>weibull_samples = np.random.weibull(a=k, size=max_pax) * λ</i><br>\n            <i>arrival_times = open_time + normalized(weibull_samples) * window_duration</i><br><br>\n           \n            <b>Comportement généré :</b><br>\n            - k < 1 : Arrivées précoces avec décroissance rapide<br>\n            - k = 1 : Distribution exponentielle<br>\n            - k > 1 : Pic décalé vers les arrivées tardives<br><br>\n           \n            <b>Valeurs par défaut :</b><br>\n            - k=1.5, λ=60.0<br><br>\n           \n            <b>Intérêt :</b><br>\n            - Grande flexibilité selon le paramètre de forme<br>\n            - Peut modéliser à la fois early-birds et last-minute<br>\n            - Utilisée en analyse de fiabilité et temps d'attente<br><br>\n           \n            <b>Limites :</b><br>\n            - Nécessite une normalisation pour adapter à la plage horaire<br>\n            - Paramètres moins intuitifs que la normale<br>\n\n           ",
        "trimodal": "\n            <h3>Distribution Tri-modale</h3>\n            <br>\n            <b>Description :</b><br>\n            Extension de la distribution bimodale pour capturer trois pics distincts (exemple : early-birds, milieu, last-minute).<br><br>\n           \n            <b>Paramètres :</b><br>\n            - means : liste des moyennes des trois pics (ex : [150, 120, 90] minutes avant le vol)<br>\n            - stds : écarts-types pour chaque pic<br>\n            - weights : proportions de passagers pour chaque pic (ex : [0.5, 0.3, 0.2])<br><br>\n           \n            <b>Définition mathématique :</b><br>\n            <i>arrivals = []</i><br>\n            <i>for mean, std, n in zip(means, stds, n_per_mode):</i><br>\n            <i>&nbsp;&nbsp;arrivals.extend(np.random.normal(loc=departure_min - mean, scale=std, size=n))</i><br>\n            <i>arrivals = np.clip(arrivals, open_time, close_time)</i><br><br>\n           \n            <b>Comportement généré :</b><br>\n            - Trois pics distincts dans la distribution des arrivées<br>\n            - Permet de modéliser des sous-populations complexes<br>\n            - Plus réaliste pour les grands aéroports avec flux diversifiés<br><br>\n           \n            <b>Valeurs par défaut :</b><br>\n            - means=[150, 120, 90]<br>\n            - stds=[20, 15, 10]<br>\n            - weights=[0.5, 0.3, 0.2]<br><br>\n           \n            <b>Intérêt :</b><br>\n            - Modèle très flexible pour les flux complexes<br>\n            - Capture plusieurs comportements typiques simultanément<br>\n            - Plus réaliste que les modèles unimodaux ou bimodaux dans certains cas<br><br>\n           \n            <b>Limites :</b><br>\n            - Beaucoup de paramètres à régler (9 au total)<br>\n            - Calcul plus intensif<br>\n            - Risque de sur-ajustement aux données<br>\n\n           ",
        "pareto": "\n            <h3>Distribution Pareto</h3>\n            <br>\n            <b>Description :</b><br>\n            Utile pour simuler une minorité de passagers arrivant très tôt ou très tard (queue lourde). Basée sur le principe de Pareto (80/20).<br><br>\n           \n            <b>Paramètres :</b><br>\n            - α : paramètre de forme (contrôle l'épaisseur de la queue)<br>\n            - scale : paramètre d'échelle<br><br>\n           \n            <b>Définition mathématique :</b><br>\n            <i>pareto_samples = (np.random.pareto(a=α, size=max_pax) + 1) * scale</i><br>\n            <i>arrival_times = departure_min - pareto_samples</i><br>\n            <i>arrival_times = np.clip(arrival_times, open_time, close_time)</i><br><br>\n           \n            <b>Comportement généré :</b><br>\n            - La plupart des passagers arrivent dans une fenêtre étroite<br>\n            - Quelques passagers arrivent très tôt (queue lourde)<br>\n            - Modèle le phénomène \"80/20\" (80% des arrivées dans 20% du temps)<br><br>\n           \n            <b>Valeurs par défaut :</b><br>\n            - α=2.0, scale=30.0<br><br>\n           \n            <b>Intérêt :</b><br>\n            - Modèle réaliste pour les comportements extrêmes<br>\n            - Capture bien les passagers \"ultra-précoces\"<br>\n            - Utile pour les flux avec variations importantes<br><br>\n           \n            <b>Limites :</b><br>\n            - Peut générer des valeurs extrêmes nécessitant un clipping<br>\n            - Paramètres moins intuitifs que la normale<br>\n            - Nécessite un ajustement minutieux des paramètres<br>\n\n           ",
        "binomialnegatif": "\n            <h3>Distribution Binomiale Négative</h3>\n            <br>\n            <b>Description :</b><br>\n            Modèle idéal pour les comptages avec surdispersion (variance > moyenne), fréquente dans les flux aéroportuaires. Alternative réaliste à la Poisson quand les arrivées sont plus variables.<br><br>\n           \n            <b>Paramétrisation :</b><br>\n            - μ (mu) : Nombre moyen d'arrivées par intervalle<br>\n            - k : Paramètre de dispersion (plus k est petit, plus la variance est grande)<br>\n            <i>Ou via n=k et p=k/(k+μ)</i><br><br>\n           \n            <b>Comportement généré :</b><br>\n            - Distribution asymétrique avec queue épaisse<br>\n            - Pic plus large qu'une Poisson<br>\n            - Capture les fluctuations réelles (ex : groupes de passagers arrivant ensemble)<br><br>\n           \n            <b>Valeurs par défaut :</b><br>\n            - μ=8 (moyenne observée pour les voyageurs)<br>\n            - k=4 (dispersion ajustée à vos données)<br><br>\n           \n            <b>Définition mathématique :</b><br>\n            <i>arrivals_per_slot = np.random.negative_binomial(n=k, p=k/(k+μ))</i><br>\n            <i>Temps répartis uniformément dans chaque intervalle</i><br><br>\n           \n            <b>Avantages :</b><br>\n            - Modèle réaliste pour les comptages surdispersés<br>\n            - Meilleure adéquation aux données aéroportuaires que la Poisson<br>\n            - Paramètres interprétables (μ=moyenne, k=dispersion)<br><br>\n           \n            <b>Limites :</b><br>\n            - Plus complexe à paramétrer que la Poisson<br>\n            - Nécessite une estimation préalable de μ et k<br>\n            - Génère uniquement des valeurs entières (adapté aux comptages)<br><br>\n           \n            <b>Cas d'usage recommandé :</b><br>\n            - Simulation des voyageurs (paramètres par défaut : μ=8, k=4)<br>\n           - Quand les données montrent variance > moyenne<br><br>\n"

    }
}